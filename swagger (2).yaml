swagger: "2.0"
info:
  description: "Swagger para desafio de conocimiento prueba de ingreso NativApps."
  version: "1.0.0"
  title: "Swagger NativApp desafio de conocimiento"
  
  
host: ""
basePath: "/"
tags:
- name: "user"
  description: "Operations about user"
  
schemes:
- "https"
- "http"
paths:
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /student:
    post:
      tags:
      - "student"
      summary: "Create student"
      description: "This can only be done by the logged in student."
      operationId: "createstudent"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created student object"
        required: true
        schema:
          $ref: "#/definitions/Student"
      responses:
        default:
          description: "successful operation"        
  /teacher:
    post:
      tags:
      - "teacher"
      summary: "Create teacher"
      description: "This can only be done by the logged in teacher."
      operationId: "createteacher"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created teacher object"
        required: true
        schema:
          $ref: "#/definitions/Teacher"
      responses:
        default:
          description: "successful operation"        
  /course:
    post:
      tags:
      - "course"
      summary: "Create course"
      description: "This can only be done by the logged in course."
      operationId: "createcourse"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created course object"
        required: true
        schema:
          $ref: "#/definitions/Course"
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
  /teacher/{ni}:
    get:
      tags:
      - "teacher"
      summary: "Get teacher by Teacher dni"
      description: ""
      operationId: "getTeacherByNi"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "ni"
        in: "path"
        description: "The name that needs to be fetched. Use Teacher1 for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Teacher"
        400:
          description: "Invalid dni supplied"
        404:
          description: "teacher not found"
    put:
      tags:
      - "teacher"
      summary: "Updated teacher"
      description: "This can only be done by the logged in teacher."
      operationId: "updateteacher"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "ni"
        in: "path"
        description: "dni that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated teacher object"
        required: true
        schema:
          $ref: "#/definitions/Teacher"
      responses:
        400:
          description: "Invalid dni supplied"
        404:
          description: "teacher not found"
    delete:
      tags:
      - "teacher"
      summary: "Delete teacher"
      description: "This can only be done by the logged as admin."
      operationId: "deleteteacher"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "ni"
        in: "path"
        description: "The dni that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid DNI supplied"
        404:
          description: "Teacher not found"
  /student/{ni}:
    get:
      tags:
      - "student"
      summary: "Get student by student dni"
      description: ""
      operationId: "getstudentByNi"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "ni"
        in: "path"
        description: "The name that needs to be fetched. Use student1 for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Student"
        400:
          description: "Invalid dni supplied"
        404:
          description: "student not found"
    put:
      tags:
      - "student"
      summary: "Updated student"
      description: "This can only be done by the logged in student."
      operationId: "updatestudent"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "ni"
        in: "path"
        description: "dni that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated student object"
        required: true
        schema:
          $ref: "#/definitions/Student"
      responses:
        400:
          description: "Invalid dni supplied"
        404:
          description: "student not found"
    delete:
      tags:
      - "student"
      summary: "Delete student"
      description: "This can only be done by the logged as admin."
      operationId: "deletestudent"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "ni"
        in: "path"
        description: "The dni that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid DNI supplied"
        404:
          description: "student not found"        
  /course/{code}:
    get:
      tags:
      - "course"
      summary: "Get course by course code"
      description: ""
      operationId: "getcourseByNi"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "code"
        in: "path"
        description: "The name that needs to be fetched. Use course1 for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Course"
        400:
          description: "Invalid dni supplied"
        404:
          description: "course not found"
    put:
      tags:
      - "course"
      summary: "Updated course"
      description: "This can only be done by the logged in course."
      operationId: "updatecourse"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "code"
        in: "path"
        description: "dni that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated course object"
        required: true
        schema:
          $ref: "#/definitions/Course"
      responses:
        400:
          description: "Invalid dni supplied"
        404:
          description: "course not found"
    delete:
      tags:
      - "course"
      summary: "Delete course"
      description: "This can only be done by the logged as admin."
      operationId: "deletecourse"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "code"
        in: "path"
        description: "The dni that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid code supplied"
        404:
          description: "course not found"          
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Student:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"     
      active:
        type: "integer"
        format: "int32"
        description: "Status"
    xml:
      name: "Student"
  Teacher:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"     
      active:
        type: "integer"
        format: "int32"
        description: "Status"
    xml:
      name: "Teacher"
  Course:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      codigo:
        type: "string"
      nombre:
        type: "string"
      descripcion:
        type: "string"     
    xml:
      name: "Course"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"